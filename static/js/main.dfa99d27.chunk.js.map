{"version":3,"sources":["components/break.js","components/session.js","components/timeLeft.js","App.js","serviceWorker.js","index.js"],"names":["Break","props","breakLengthInMinutes","moment","duration","breaklength","asMinutes","id","className","onClick","decrement","increment","Session","sessionLengthInMinutes","sessionlength","minutes","momentDurationFormatSetup","TimeLeft","startStopButtonLabel","start","timerLabel","timeLeft","handleResetButtonClick","formattedTimeLeft","format","trim","App","audioElement","useRef","useState","currentSessionType","setCurrentSessionType","intervalId","setIntervalId","setbreaklength","setsessionlength","setTimeLeft","useEffect","current","play","isStarted","clearInterval","newIntervalId","setInterval","prevTimeLeft","load","newbreakLength","newsessionLength","ref","src","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dfa99d27.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\n\nconst Break = props => {\n\n\n    const breakLengthInMinutes = moment.duration(props.breaklength, 's').asMinutes();\n    return(\n\n        <div>\n            <p id='session-label'>Break</p>\n            <p id=\"session-length\">{breakLengthInMinutes}</p>\n            <button className=\"border-2 border-blue-900 hover:bg-blue-900 text-blue-900 hover:text-white px-2 m-1 rounded\" id=\"session-decrement\" onClick={props.decrement}>-</button>\n            <button className=\"border-2 border-blue-900 hover:bg-blue-900 text-blue-900 hover:text-white px-2 m-1 rounded\" id=\"session-increment\" onClick={props.increment}>+</button>\n        </div>\n    )\n};\n\nexport default Break\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst Session = props => {\n\n    const sessionLengthInMinutes = moment.duration(props.sessionlength, 's').minutes();\n\n    return(\n        <div>\n            <p id='break-label'>Session</p>\n            <p id=\"break-length\">{sessionLengthInMinutes}</p>\n            <button  className=\"border-2 border-blue-900   hover:bg-blue-900 text-blue-900 hover:text-white font-bold px-2 m-1 rounded\" id=\"break-decrement\" onClick={props.decrement}>-</button>\n            <button className=\"border-2 border-blue-900   hover:bg-blue-900 text-blue-900 hover:text-white font-bold px-2 m-1 rounded\" id=\"break-increment\" onClick={props.increment}>+</button>\n        </div>\n    )\n};\n\nexport default Session","import React from \"react\";\nimport moment from \"moment\";\nimport momentDurationFormatSetup from 'moment-duration-format'\n\nmomentDurationFormatSetup(moment);\n\nconst TimeLeft = ({startStopButtonLabel,start, timerLabel, timeLeft, handleResetButtonClick}) =>{\n\n    const  formattedTimeLeft = moment.duration(timeLeft,'s').format('mm:ss',{trim:false});\n\n    return ( <div>\n    <p className=\"text-4xl\" id='timer-label'>{timerLabel}</p>\n    <div className=\"text-5xl\">{formattedTimeLeft}</div>\n    <button className=\"border-2 border-blue-900   hover:bg-blue-900 text-blue-900 hover:text-white font-bold px-2 m-2 rounded\" onClick={start}>{startStopButtonLabel}</button>\n    <button className=\"border-2 border-blue-900   hover:bg-blue-900 text-blue-900 hover:text-white font-bold px-2 m-2 rounded\" id=\"reset\" onClick={handleResetButtonClick}>{\"Reset\"}</button>\n    </div>\n    )\n\n};\n\nexport default TimeLeft;","import React, {useEffect, useRef, useState} from 'react';\nimport Break from \"./components/break\";\nimport './assets/main.css';\nimport Session from \"./components/session\";\nimport TimeLeft from \"./components/timeLeft\";\n\nfunction App() {\n  const audioElement = useRef(null);\n  const [currentSessionType, setCurrentSessionType] = useState('Session');\n  const [intervalId, setIntervalId]  = useState(null);\n  const [breaklength, setbreaklength] = useState(5*60);\n  const [sessionlength, setsessionlength] = useState(60*25);\n  const [timeLeft, setTimeLeft]  = useState(sessionlength);\n\n  const decrementBreak =() => {\n    const newbreakLength = breaklength -60;\n    if(newbreakLength>0){\n      setbreaklength(newbreakLength);\n    }\n  };\n\n  const incrementBreak =()=>{\n    const newbreakLength = breaklength +60;\n    if(newbreakLength <= 60*60){\n      setbreaklength(newbreakLength);\n    }\n  };\n\n  const decrementSession =() => {\n    const newsessionLength = sessionlength -60;\n    if(newsessionLength > 0) {\n      setsessionlength(newsessionLength)\n    }\n  };\n\n  const incrementSession =() => {\n      setsessionlength(sessionlength+60)\n  };\n\n\n  useEffect(\n      () => {\n        setTimeLeft(sessionlength)\n      }, [sessionlength]\n  );\n\n\n    useEffect(() => {\n       if(timeLeft === 0){\n           //play audio\n           audioElement.current.play();\n           if(currentSessionType === 'Session'){\n               setCurrentSessionType('Break');\n               setTimeLeft(breaklength)\n           }else if(currentSessionType ==='Break'){\n               setCurrentSessionType('Session');\n               setTimeLeft(sessionlength)\n           }\n       }\n    },[breaklength, sessionlength, setTimeLeft, currentSessionType,timeLeft ]);\n\n\n  const isStarted = intervalId != null;\n  const start = () =>{\n if(isStarted){\n      clearInterval(intervalId);\n      setIntervalId(null)\n    }else{\n\n      const newIntervalId =  setInterval(() =>{\n          setTimeLeft(prevTimeLeft =>  prevTimeLeft -1);\n      },1000);\n      setIntervalId(newIntervalId);\n    }\n  };\n\n\n  const handleResetButtonClick = () => {\n    audioElement.current.load();\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setCurrentSessionType('Session');\n    setsessionlength(25*60);\n    setbreaklength(5*60);\n    setTimeLeft(25*60)\n\n  };\n\n  return (\n\n    <div className=\"App flex flex-col h-screen items-center justify-center  text-center bg-blue-200 \">\n      <div className=\"flex bg-gray-100 rounded\">\n        <TimeLeft sessionlength={sessionlength}\n                start={start}\n                startStopButtonLabel={isStarted? 'Stop': 'Start'}\n                timerLabel={currentSessionType} breaklength={breaklength}\n                timeLeft={timeLeft}\n                handleResetButtonClick={handleResetButtonClick}\n        />\n      </div>\n\n    <div  className=\" bg-gray-100 rounded flex text-center text-lg m-2 p-1\">\n      <Break  breaklength={breaklength}\n              decrement ={decrementBreak}\n              increment = {incrementBreak}/>\n\n      <Session  sessionlength={sessionlength}\n      decrement ={decrementSession}\n      increment = {incrementSession}\n      />\n    </div>\n\n      <audio id=\"beep\" ref={audioElement}>\n      <source src=\"https://onlineclock.net/audio/options/default.mp3\" type=\"audio/mpeg\"/>\n      </audio>\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>, document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}